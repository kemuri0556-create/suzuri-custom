#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <dt-bindings/zmk/pointing.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

// レイヤーの定義
#define DEFAULT 0
#define LAYER1  1
#define LAYER2  2
#define LAYER2  3

// カスタムビヘイビアの定義
/ {
        // レイヤシフトとマウスキープレスを共存させる。単押しするとマウスキープレス、長押しでレイヤシフト。
        lt_mkp: lt_mkp {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_MKP";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
        };

        mod_mkp: mod_mkp {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_MKP";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
        };
    };

/ {
    keymap {
        // キーマップの定義
        // 参考 https://zmk.dev/docs/keymaps
        compatible = "zmk,keymap";
        // 人差し指でボールを操作するとなるとどうしても親指でボタンを押すことになるが、ボタン1と2が操作しづらすぎる。どっちかというと下の2ボタンで完結したい。
        default_layer {
            bindings = <
                &mkp LCLK    &mkp RCLK
                &lt_mkp LAYER1 LCLK   &lt_mkp LAYER2 RCLK
            >;
        };

        layer_1 {
            bindings = <
                &mkp MB4     &mkp MB5
                &trans       &mkp MCLK
            >;
        };

        layer_2 {
            bindings = <
                &kp LC(C)    &kp LC(V)
                &kp LC(X)    &trans
            >;
        };
    };
};

// トラックボールの設定(カスタマイズしたい場合は以下をコメントアウトして編集してください)
// #include <input/processors.dtsi>  
#include <dt-bindings/zmk/input_transform.h>  

/ {
    trackball_listener {
        // Input Processor を使用して、トラックボールの入力を処理できます。
        // 参考 https://zmk.dev/docs/keymaps/input-processors
        compatible = "zmk,input-listener";
        device = <&trackball>;
        input-processors = 
            <&zip_x_scaler 10 9>, // X軸（横方向）の移動量を1.125倍に調整。倍率を大きくすると、Y軸（縦方向）の移動時に横ブレを感じやすくなります。(元々は9 8だった)
            <&zip_xy_transform INPUT_TRANSFORM_X_INVERT>; // X軸反転

        scroller {
            layers = <1>;
            input-processors =
                <&zip_xy_to_scroll_mapper>,
                <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>, // Y軸反転
                <&zip_scroll_scaler 1 40>; // スクロール速度を1/40に調整
            process-next;
        };
    };
};
