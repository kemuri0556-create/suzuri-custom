#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <dt-bindings/zmk/pointing.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

// レイヤーの定義
#define DEFAULT 0
#define LAYER1  1
#define LAYER2  2


// 入力プロセッサーの設定

/ {
    input_processors {
        // 垂直スクロールのスケーラー

        zip_wheel_scaler: zip_wheel_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_WHEEL>;
            track-remainders;
        };

        // 水平スクロールのスケーラー

        zip_hwheel_scaler: zip_hwheel_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_HWHEEL>;
            track-remainders;
        };
    };
};

// カスタムビヘイビアの定義

/ {
    behaviors {
        // マウスカーソル移動の回転検出

        mouse_mv: mouse_cursor_move {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&mmv>, <&mmv>;

            tap-ms = <10>;
        };

        // マウスホイールスクロールの回転検出

        mouse_scrl: mouse_wheel_scrl {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <10>;
        };

        lt_mkp: lt_mkp {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_MKP";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mod_mkp: mod_mkp {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_MKP";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

/ {
    keymap {
        // キーマップの定義
        // 参考 https://zmk.dev/docs/keymaps
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &mkp LCLK    &mkp RCLK
                &lt_mkp LAYER1 MCLK   &mo LAYER2
            >;
        };

        layer_1 {
            bindings = <
                &mkp MB4     &mkp MB5
                &trans       &mkp MCLK
            >;
        };

        layer_2 {
            bindings = <
                &kp LC(C)    &kp LC(V)
                &kp LC(X)    &trans
            >;
        };
    };
};

// トラックボールの設定(カスタマイズしたい場合は以下をコメントアウトして編集してください)
// #include <input/processors.dtsi>  
// #include <dt-bindings/zmk/input_transform.h>  

/ {
    trackball_listener {
        // Input Processor を使用して、トラックボールの入力を処理できます。
        // 参考 https://zmk.dev/docs/keymaps/input-processors
        compatible = "zmk,input-listener";
        device = <&trackball>;
        input-processors = 
            <&zip_x_scaler 9 9>, // X軸（横方向）の移動量を1.125倍に調整。倍率を大きくすると、Y軸（縦方向）の移動時に横ブレを感じやすくなります。
            <&zip_xy_transform INPUT_TRANSFORM_X_INVERT>; // X軸反転

        scroller {
            layers = <1>;
            input-processors =
                <&zip_xy_to_scroll_mapper>,
                <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>, // Y軸反転
                <&zip_scroll_scaler 1 40>; // スクロール速度を1/40に調整
            process-next;
        };
    };
};
